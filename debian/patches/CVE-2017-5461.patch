Backport of this upstream patch:

# User Franziskus Kiefer <franziskuskiefer@gmail.com>
# Date 1489748381 -3600
# Node ID 77a5bb81dbaac5b03266a64ff981c156b61c8931
# Parent  da15c12097edbe876620ed5da8378ee3269caea8

--- nss-3.26.orig/nss/lib/util/nssb64e.c
+++ nss-3.26/nss/lib/util/nssb64e.c
@@ -285,6 +285,11 @@ PL_Base64MaxEncodedLength (PRUint32 size
 {
     PRUint32 tokens, tokens_per_line, full_lines, line_break_chars, remainder;
 
+    /* This is the maximum length we support. */
+    if (size > 0x3fffffff) {
+        return 0;
+    }
+    
     tokens = (size + 2) / 3;
 
     if (line_length == 0)
@@ -461,6 +466,10 @@ PL_Base64EncodeBuffer (const unsigned ch
      * How much space could we possibly need for encoding this input?
      */
     need_length = PL_Base64MaxEncodedLength (srclen, line_length);
+    if (need_length == 0) {
+        PORT_SetError(SEC_ERROR_INVALID_ARGS);
+        return NULL;
+    }
 
     /*
      * Make sure we have at least that much, if output buffer provided.
@@ -643,6 +652,10 @@ NSSBase64_EncodeItem (PLArenaPool *arena
     }
 
     max_out_len = PL_Base64MaxEncodedLength (inItem->len, 64);
+    if (max_out_len == 0) {
+        PORT_SetError(SEC_ERROR_INVALID_ARGS);
+        return NULL;
+    }
 
     if (arenaOpt != NULL)
 	mark = PORT_ArenaMark (arenaOpt);
