--- nss-stretch.git.orig/nss/lib/pk11wrap/pk11akey.c
+++ nss-stretch.git/nss/lib/pk11wrap/pk11akey.c
@@ -164,7 +164,6 @@
 	    keyType = CKK_EC;
 	    PK11_SETATTRS(attrs, CKA_VERIFY, &cktrue, sizeof(CK_BBOOL));attrs++;
 	    PK11_SETATTRS(attrs, CKA_DERIVE, &cktrue, sizeof(CK_BBOOL));attrs++;
- 	    signedattr = attrs;
 	    PK11_SETATTRS(attrs, CKA_EC_PARAMS, 
 		          pubKey->u.ec.DEREncodedParams.data,
 		          pubKey->u.ec.DEREncodedParams.len); attrs++;
@@ -195,10 +194,13 @@
 	}
 
 	templateCount = attrs - theTemplate;
-	signedcount = attrs - signedattr;
 	PORT_Assert(templateCount <= (sizeof(theTemplate)/sizeof(CK_ATTRIBUTE)));
-	for (attrs=signedattr; signedcount; attrs++, signedcount--) {
-		pk11_SignedToUnsigned(attrs);
+        if (pubKey->keyType != ecKey) {
+            PORT_Assert(signedattr);
+            signedcount = attrs - signedattr;
+            for (attrs = signedattr; signedcount; attrs++, signedcount--) {
+                pk11_SignedToUnsigned(attrs);
+            }
 	} 
         rv = PK11_CreateNewObject(slot, CK_INVALID_SESSION, theTemplate,
 				 	templateCount, isToken, &objectID);
@@ -955,9 +957,13 @@
 					&cktrue, &ckfalse);
 
      /* Not everyone can handle zero padded key values, give
-      * them the raw data as unsigned */
-     for (ap=attrs; extra_count; ap++, extra_count--) {
-	pk11_SignedToUnsigned(ap);
+      * them the raw data as unsigned. The exception is EC,
+      * where the values are encoded or zero-preserving
+      * per-RFC5915 */
+     if (privKey->keyType != ecKey) {
+        for (ap = attrs; extra_count; ap++, extra_count--) {
+            pk11_SignedToUnsigned(ap);
+        }
      }
 
      /* now Store the puppies */
--- nss-stretch.git.orig/nss/lib/pk11wrap/pk11cert.c
+++ nss-stretch.git/nss/lib/pk11wrap/pk11cert.c
@@ -172,7 +172,9 @@
 	    SECKEY_DestroyPublicKey(pubKey);
 	    return PR_FALSE;
 	}
-	pk11_SignedToUnsigned(&theTemplate);
+        if (pubKey->keyType != ecKey) {
+            pk11_SignedToUnsigned(&theTemplate);
+        }
 	if (pk11_FindObjectByTemplate(slot,&theTemplate,1) != CK_INVALID_HANDLE) {
 	    SECKEY_DestroyPublicKey(pubKey);
 	    return PR_TRUE;
--- nss-stretch.git.orig/nss/lib/softoken/legacydb/lgattr.c
+++ nss-stretch.git/nss/lib/softoken/legacydb/lgattr.c
@@ -959,9 +959,9 @@
     case CKA_UNWRAP:
 	return LG_CLONE_ATTR(attribute,type,lg_StaticFalseAttr);
     case CKA_VALUE:
-	return lg_CopyPrivAttrSigned(attribute, type,
-					key->u.ec.privateValue.data,
-					key->u.ec.privateValue.len, sdbpw);
+        return lg_CopyPrivAttribute(attribute, type,
+                                    key->u.ec.privateValue.data,
+                                    key->u.ec.privateValue.len, sdbpw);
     case CKA_EC_PARAMS:
 	return lg_CopyAttributeSigned(attribute, type,
 					key->u.ec.ecParams.DEREncoding.data,
--- nss-stretch.git.orig/nss/lib/softoken/pkcs11c.c
+++ nss-stretch.git/nss/lib/softoken/pkcs11c.c
@@ -7186,7 +7186,7 @@
 
 	rv = ECDH_Derive(&ecPoint, &privKey->u.ec.ecParams, &ecScalar,
 	                 withCofactor, &tmp); 
-	PORT_Free(ecScalar.data);
+        PORT_ZFree(ecScalar.data, ecScalar.len);
 	ecScalar.data = NULL;
 	if (privKey != sourceKey->objectInfo) {
 	   nsslowkey_DestroyPrivateKey(privKey);
