From: Markus Koschany <apo@debian.org>
Date: Mon, 20 Feb 2023 14:51:45 +0100
Subject: CVE-2023-0767

Origin: https://hg.mozilla.org/projects/nss/rev/684586ec163ad4fbbf15ea2cd1ee5c2da43036ad
---
 nss/lib/pkcs12/p12d.c    | 27 ++++++++++++++++++---------
 nss/lib/pkcs12/p12t.h    |  1 +
 nss/lib/pkcs12/p12tmpl.c |  4 ++--
 3 files changed, 21 insertions(+), 11 deletions(-)

diff --git a/nss/lib/pkcs12/p12d.c b/nss/lib/pkcs12/p12d.c
index 19af70d..1a895b6 100644
--- a/nss/lib/pkcs12/p12d.c
+++ b/nss/lib/pkcs12/p12d.c
@@ -322,32 +322,41 @@ sec_pkcs12_decoder_safe_bag_update(void *arg, const char *data,
     SEC_PKCS12DecoderContext *p12dcx;
     SECStatus rv;
 
-    /* make sure that we are not skipping the current safeBag,
-     * and that there are no errors.  If so, just return rather
-     * than continuing to process.
-     */
-    if(!safeContentsCtx || !safeContentsCtx->p12dcx 
-		|| safeContentsCtx->p12dcx->error 
-		|| safeContentsCtx->skipCurrentSafeBag) {
+
+    if (!safeContentsCtx || !safeContentsCtx->p12dcx || !safeContentsCtx->currentSafeBagA1Dcx) {
 	return;
     }
     p12dcx = safeContentsCtx->p12dcx;
 
+    /* make sure that there are no errors and we are not skipping the current safeBag */
+    if (p12dcx->error || safeContentsCtx->skipCurrentSafeBag) {
+        goto loser;
+    }
+
+
     rv = SEC_ASN1DecoderUpdate(safeContentsCtx->currentSafeBagA1Dcx, data, len);
     if(rv != SECSuccess) {
 	p12dcx->errorValue = PORT_GetError();
+    p12dcx->error = PR_TRUE;
+    goto loser;
+    }
+
+    /* The update may have set safeContentsCtx->skipCurrentSafeBag, and we
+     * may not get another opportunity to clean up the decoder context.
+     */
+    if (safeContentsCtx->skipCurrentSafeBag) {
+
 	goto loser;
     }
 
     return;
 
 loser:
-    /* set the error, and finish the decoder context.  because there 
+    /* Finish the decoder context. Because there
      * is not a way of returning an error message, it may be worth
      * while to do a check higher up and finish any decoding contexts
      * that are still open.
      */
-    p12dcx->error = PR_TRUE;
     SEC_ASN1DecoderFinish(safeContentsCtx->currentSafeBagA1Dcx);
     safeContentsCtx->currentSafeBagA1Dcx = NULL;
     return;
diff --git a/nss/lib/pkcs12/p12t.h b/nss/lib/pkcs12/p12t.h
index d583f7d..df1fa92 100644
--- a/nss/lib/pkcs12/p12t.h
+++ b/nss/lib/pkcs12/p12t.h
@@ -73,6 +73,7 @@ struct sec_PKCS12SafeBagStr {
 	sec_PKCS12CRLBag *crlBag;
 	sec_PKCS12SecretBag *secretBag;
 	sec_PKCS12SafeContents *safeContents;
+	SECItem *unknownBag;
     } safeBagContent;
 
     sec_PKCS12Attribute **attribs;
diff --git a/nss/lib/pkcs12/p12tmpl.c b/nss/lib/pkcs12/p12tmpl.c
index 184e0d4..e66cfa5 100644
--- a/nss/lib/pkcs12/p12tmpl.c
+++ b/nss/lib/pkcs12/p12tmpl.c
@@ -30,12 +30,12 @@ sec_pkcs12_choose_safe_bag_type(void *src_or_dest, PRBool encoding)
 
     oiddata = SECOID_FindOID(&safeBag->safeBagType);
     if(oiddata == NULL) {
-	return SEC_ASN1_GET(SEC_AnyTemplate);
+    return SEC_ASN1_GET(SEC_PointerToAnyTemplate);
     }
 
     switch (oiddata->offset) {
 	default:
-	    theTemplate = SEC_ASN1_GET(SEC_AnyTemplate);
+	    theTemplate = SEC_ASN1_GET(SEC_PointerToAnyTemplate);
 	    break;
 	case SEC_OID_PKCS12_V1_KEY_BAG_ID:
 	    theTemplate = SEC_ASN1_GET(SECKEY_PointerToPrivateKeyInfoTemplate);
